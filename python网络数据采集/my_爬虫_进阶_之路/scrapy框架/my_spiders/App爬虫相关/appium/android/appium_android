# API
使用代码操作App、总结相关API的用法。这里使用的Python库为AppiumPythonClient，其GitHub地址为https://github.com/appium/python-client，此库继承自Selenium，使用方法与Selenium有很多共同之处。

## 初始化
需要配置Desired Capabilities参数，完整的配置说明可以参考https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md。一般来说，配置几个基本参数即可，如下所示：
```python
from appium import webdriver

server = 'http://localhost:4723/wd/hub'
desired_caps = {
    'platformName': 'Android',
    'deviceName': 'fz_5_0_0',
    'appPackage': 'com.tencent.mm',
    'appActivity': '.ui.LauncherUI'
}
driver = webdriver.Remote(server, desired_caps)
```
这里配置了启动微信App的Desired Capabilities，这样Appnium就会自动查找手机上的包名和入口类，然后将其启动。包名和入口类的名称可以在安装包中的AndroidManifest.xml文件获取。

如果要打开的App没有事先在手机上安装，我们可以直接指定App参数为安装包所在路径，这样程序启动时就会自动向手机安装并启动App，如下所示：
```python
from appium import webdriver

server = 'http://localhost:4723/wd/hub'
desired_caps = {
    'platformName': 'Android',
    'deviceName': 'fz_5_0_0',
    'app': './weixin.apk'
}
driver = webdriver.Remote(server, desired_caps)
```
程序启动的时候就会寻找PC当前路径下的APK安装包，然后将其安装到手机中并启动。

## 获取 apk 包名即 appPackage 和 appActivity
```bash
先touch log.txt
a. 启动待测apk
b. 开启日志输出: adb logcat>/Users/afa/myFiles/tmp/log.txt
c. 关闭日志输出: ctrl+c
d. 查看日志
找寻：Displayed com.mm.android.hsy/.ui.LoginActivity: +3s859ms
appPackage = com.mm.android.hsy
appActivity = .ui.LoginActivity
```

## 查找元素
我们可以使用Selenium中通用的查找方法来实现元素的查找，如下所示：
```python
el = driver.find_element_by_id('com.tencent.mm:id/cjk')
```
在Selenium中，其他查找元素的方法同样适用，在此不再赘述。

在Android平台上，我们还可以使用UIAutomator来进行元素选择，如下所示：
```python
el = self.driver.find_element_by_android_uiautomator('new UiSelector().description("Animation")')
els = self.driver.find_elements_by_android_uiautomator('new UiSelector().clickable(true)')
```
在iOS平台上，我们可以使用UIAutomation来进行元素选择，如下所示：
```python
el = self.driver.find_element_by_ios_uiautomation('.elements()[0]')
els = self.driver.find_elements_by_ios_uiautomation('.elements()')
```
还可以使用iOS Predicates来进行元素选择，如下所示：
```python
el = self.driver.find_element_by_ios_predicate('wdName == "Buttons"')
els = self.driver.find_elements_by_ios_predicate('wdValue == "SearchBar" AND isWDDivisible == 1')
```
也可以使用iOS Class Chain来进行选择，如下所示：
```python
el = self.driver.find_element_by_ios_class_chain('XCUIElementTypeWindow/XCUIElementTypeButton[3]')
els = self.driver.find_elements_by_ios_class_chain('XCUIElementTypeWindow/XCUIElementTypeButton')
```
但是此种方法只适用于XCUITest驱动，具体可以参考：https://github.com/appium/appium-xcuitest-driver

## 点击
点击可以使用tap()方法，该方法可以模拟手指点击（最多五个手指），可设置按时长短（毫秒），代码如下所示：
```python
tap(self, positions, duration=None)
```
其中后两个参数如下。
- positions：它是点击的位置组成的列表。
- duration：它是点击持续时间。

实例如下所示：
```python
driver.tap([(100, 20), (100, 60), (100, 100)], 500)
```
这样就可以模拟点击屏幕的某几个点。

对于某个元素如按钮来说，我们可以直接调用cilck()方法实现模拟点击，实例如下所示：
```python
button = find_element_by_id('com.tencent.mm:id/btn')
button.click()
```

## 屏幕拖动
可以使用scroll()方法模拟屏幕滚动，用法如下所示：
```python
scroll(self, origin_el, destination_el)
```
可以实现从元素origin_el滚动至元素destination_el。

它的后两个参数如下。
- original_el：它是被操作的元素。
- destination_el：它是目标元素。
```python
driver.scroll(el1,el2)
```
可以使用swipe()模拟从A点滑动到B点，用法如下所示：
```python
swipe(self, start_x, start_y, end_x, end_y, duration=None)
```
后面几个参数说明如下。
- start_x：它是开始位置的横坐标。
- start_y：它是开始位置的纵坐标。
- end_x：它是终止位置的横坐标。
- end_y：它是终止位置的纵坐标。
- duration：它是持续时间，单位是毫秒。

实例如下所示：
```python
# 这样可以实现在5s时间内，由(100, 100)滑动到 (100, 400)
driver.swipe(100, 100, 100, 400, 5000)
```
可以使用flick()方法模拟从A点快速滑动到B点，用法如下所示：
```python
flick(self, start_x, start_y, end_x, end_y)
```
几个参数说明如下。
- start_x：它是开始位置的横坐标。
- start_y：它是开始位置的纵坐标。
- end_x：它是终止位置的横坐标。
- end_y：它是终止位置的纵坐标。
```python
driver.flick(100, 100, 100, 400)
```
## 拖曳
可以使用drag_and_drop()将某个元素拖动到另一个目标元素上，用法如下所示：
```python
drag_and_drop(self, origin_el, destination_el)
```
可以实现将元素origin_el拖曳至元素destination_el。

两个参数说明如下。
- original_el：它是被拖曳的元素。
- destination_el：它是目标元素。
```python
driver.drag_and_drop(el1, el2)
```

## 文本输入
```python
el = find_element_by_id('com.tencent.mm:id/cjk')
el.set_text('Hello')
```

## 动作链
与Selenium中的ActionChains类似，Appium中的TouchAction可支持的方法有tap()、press()、long_press()、release()、move_to()、wait()、cancel()等，实例如下所示：
```python
el = self.driver.find_element_by_accessibility_id('Animation')
action = TouchAction(self.driver)
action.tap(el).perform()
```
首先选中一个元素，然后利用TouchAction实现点击操作。

如果想要实现拖动操作，可以用如下方式：
```python
els = self.driver.find_elements_by_class_name('listView')
a1 = TouchAction()
a1.press(els[0]).move_to(x=10, y=0).move_to(x=10, y=-75).move_to(x=10, y=-600).release()
a2 = TouchAction()
a2.press(els[1]).move_to(x=10, y=10).move_to(x=10, y=-300).move_to(x=10, y=-600).release()
```

## 利用以上API，我们就可以完成绝大部分操作。更多的API操作可以参考：https://testerhome.com/topics/3711